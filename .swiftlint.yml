# Swiftlint homepage: https://realm.github.io/SwiftLint/
# Swiftlint rules dir: https://realm.github.io/SwiftLint/rule-directory.html

# For formatting (aka: fixing, correcting)
# swiftlint lint --fix --config .swiftlint.yml --reporter json --quiet .
# 
# For linting
# swiftlint lint --strict --config .swiftlint.yml --reporter json --quiet .


# included: # paths to include during linting. `--path` is ignored if present.
#   - MPEngine/Sources
#   - MPEngine/Tests

# excluded: # paths to ignore during linting. Takes precedence over `included`.
#   # - someDir/someDir
  
disabled_rules: # rule identifiers to exclude from running
# TODO: Remove these items, or move them to child rule files while gradually 
# updating code to allow removing them completely. 
 - identifier_name
 - todo
 - closure_parameter_position
 - force_unwrapping
 - function_body_length

 # Comment these out one at a time while fixing what they reveal
 - cyclomatic_complexity # TODO: See if we can customze
 - type_body_length # class code is too long
 - type_name  # Class names are too long
 - file_length # files are too long
 - nesting # nesting types
 - unused_closure_parameter # why aren't these params being used? Switch to _ where it is okay
 - for_where # Switch these to functional programming
 - function_parameter_count # too many funtion params
 - closure_end_indentation # Maybe this one can stay disabled. 
 - switch_case_alignment # This doesn't jive with Swift 5.9

opt_in_rules: # some rules are only opt-in
    # TODO: Make rule to detect empty guard return (log should be required)
    - array_init
    # - attributes
    - closure_end_indentation
    - closure_spacing
    - collection_alignment
    - implicit_return
    - implicitly_unwrapped_optional
    - let_var_whitespace
    - literal_expression_end_indentation
    - multiline_arguments
    - multiline_parameters
    - operator_usage_whitespace
    - overridden_super_call
    - prefixed_toplevel_constant
    - redundant_nil_coalescing
    - redundant_type_annotation
    - return_arrow_whitespace
    - static_operator
    - trailing_closure
    - toggle_bool
    - unneeded_parentheses_in_closure_argument
    - untyped_error_in_catch
    # - unused_import
    - vertical_whitespace_closing_braces
    - vertical_whitespace_opening_braces

    # https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#wrapArguments

    # to reindent files
    # swiftformat . --rules indent --lint
    # swiftformat . --rules blankLinesBetweenScopes  --lint

    # for function definitions
    # swiftformat . --wraparguments before-first --rules wraparguments --lint
    - multiline_parameters_brackets 

    # for callers of functions
    # swiftformat . --wrapparameters before-first --rules wraparguments --lint
    # - multiline_arguments_brackets 
    
    - multiline_function_chains

    # swiftformat . --wrapcollections before-first --rules wraparguments --lint
    - multiline_literal_brackets

    - vertical_parameter_alignment_on_call    # - prohibited_super_call

    ## New stuff to enable. The more # the more enticing and beneficial
    ## - vertical_parameter_alignment_on_call # ensures proper multiline indenting for params
    # - type_contents_order
    ## - unavailable_function
    # - missing_docs
    ### - private_action
    ### - private_outlet
    ### - comment_spacing

## https://github.com/realm/SwiftLint#analyze-experimental
#
# Analyze (experimental)
#
# The experimental swiftlint analyze command can lint Swift files using the full type-checked AST. The compiler log path containing the clean swiftc build command invocation (incremental builds will fail) must be passed to analyze via the --compiler-log-path flag. e.g. --compiler-log-path /path/to/xcodebuild.log
#
# This can be obtained by
#     Cleaning DerivedData (incremental builds won't work with analyze)
#     Running xcodebuild -workspace {WORKSPACE}.xcworkspace -scheme {SCHEME} > xcodebuild.log
# xcodebuild -workspace Nightlight.xcworkspace -scheme Nightlight_Development > xcodebuild.log
#     Running swiftlint analyze --compiler-log-path xcodebuild.log
# 

## These args are analyzer_rules and opt-in
# unused_import,yes,yes,no,lint,yes,severity:,...,|
# capture_variable,yes,no,no,lint,yes,warning,|
# explicit_self,yes,yes,no,style,yes,warning,|
# unused_declaration,yes,no,no,lint,yes,severity:,...,|
analyzer_rules:  
  # all analyzer rules are opt in. This is (currently) all 5 of the rules. 
  # - capture_variable
  # - explicit_self
  # - typesafe_array_init
  # - unused_declaration
  - unused_import

# cyclomatic_complexity: 
#   warning: 15
#   error: 25

trailing_whitespace:
    ignores_empty_lines: true # Xcode inserts a tab after pressing enter inside of any object. This def ignores them

identifier_name:
  min_length: 1 # We can either define this ourselves or disable identifier_name rule
  excluded: # excluded via string array
    - id
    - URL

line_length:
  warning: 160
  error: 200
  # https://github.com/realm/SwiftLint/blob/main/Source/SwiftLintBuiltInRules/Rules/RuleConfigurations/LineLengthConfiguration.swift
  ignores_comments: true
  ignores_urls: true
  ignores_function_declarations: true
  ignores_interpolated_strings: true

# Search for // swiftlint:enable and fix/test code where a quick update was not feasible
# How to force private vs fileprivate on functions?
# Can't wrap long strings in code without adding newlines. Can we get line_length to ignore these?
# No empty assertion messages (did assertionFailure, but assert is harder to write a regex for)
# See match_kinds cases here: https://github.com/realm/SwiftLint#2-regex-custom-rules

custom_rules:
  # how to force @objc @IBAction to be on own line?
  at_on_own_line: 
    regex: "@[a-zA-Z]* func" 
    message: "Functions which use @directives must have the @directive on its own line b" # violation message. optional.
    severity: warning # violation severity. optional.

  assertion_fail_message_required: 
    regex: "assertionFailure\\(\\)" 
    message: "Don't be lazy. Put an assertion message in for the next guy"
    severity: warning # violation severity. optional.

  precondition_fail_message_required: 
    regex: "preconditionFailure\\(\\)" 
    message: "Don't be lazy. Put a failure message in for the next guy"
    severity: warning # violation severity. optional.

  fatal_error_message_required: 
    regex: "fatalError\\(\\)" 
    message: "Don't be lazy. Put a failure message in for the next guy"
    severity: warning # violation severity. optional.

  fixme_ephemeral: 
    regex: "^\\s*// FIX.*" 
    message: "FIXME is meant to be ephemeral and should be removed before merging"
    severity: warning # violation severity. optional.

  period_single_space: 
    regex: "\\.  " 
    message: "Use only a single space after a period"
    severity: warning
    match_kinds:
      - comment
      - doccomment

  period_single_space_after_question_marks:
    regex: "\\?  "
    message: "Use only a single space after a question mark"
    severity: warning
    match_kinds:
      - comment
      - doccomment

  self_preferred: 
    regex: "guard let safeSelf = self" 
    message: "Use 'self' for an unwrapped non-optional self"
    severity: error

  entityName_preferred: 
    regex: " \\.init\\(" 
    message: "Prefer class/struct/enum name to .init" 
    severity: error
  
  avoid_preprocessor_usage_dev:
    regex: "if HATCH_DEVELOPMENT"
    message: "Use isDev instead of #if HATCH_DEVELOPMENT"
    severity: error

  avoid_preprocessor_usage_internal:
    regex: "if HATCH_INTERNAL"
    message: "Use CurrentBuildMode() == .internal instead of #if HATCH_INTERNAL"
    severity: error

  avoid_preprocessor_usage_external:
    regex: "if HATCH_EXTERNAL"
    message: "Use CurrentBuildMode() == .external instead of #if HATCH_EXTERNAL"
    severity: error

  avoid_preprocessor_usage_release:
    regex: "if HATCH_RELEASE"
    message: "Use CurrentBuildMode() == .release instead of #if HATCH_RELEASE"
    severity: error
  
  avoid_unnecessary_internal_acl_usage:
    regex: "internal"
    message: "Don't use the internal ACL specifier when it can be avoided"
    severity: warning
    match_kinds:
    - attribute.builtin

  filename_placeholder: 
    regex: "^//  File.swift$" 
    message: "Filename placeholders should not be committed."
    severity: warning

  spm_bundle: 
    regex: "Bundle\\(for" 
    message: "Prefer Bundle.main or Bundle.module"
    severity: warning

  # We want to limit new usage of contentItemDictionary.
  # Some existing usage of this is ok.
  content_map:
    regex: "contentItemDictionary"
    message: "Don't use contentItemDictionary please"
    severity: error

  # Older products before SuperIoT use an old legacy content system, but we don't
  # want to use that content system with new products. This lint rule is intended to
  # prevent using the old content system with new products. Really we shouldn't add any more
  # usage of the old content system unless we do improvements to old products, which doesn't
  # seem like a thing we do right now.
  legacy_content_system:
    regex: "\\.getLegacyContentItem\\("
    message: "Use ContentDataFetcherV2 instead of old legacy content system"
    severity: error

  imageLiterals:
    regex: "#imageLiteral\\("
    message: "Prefer swiftgen and HatchAssets"
    severity: error

  uiImageNamed:
    regex: "UIImage\\(named"
    message: "Prefer swiftgen and HatchAssets"
    severity: error

  keep_hatch_brain_top_level:
    regex: "package: \"HatchBrain\""
    message: "HatchBrain must stay as a top level module."
    severity: error
    
  keep_hatch_ui_top_level:
    regex: "package: \"HatchUI\""
    message: "HatchUI must stay as a top level module."
    severity: error

  view_models_must_use_main_actor:
    regex: "(?<!MainActor)\\n(public |internal |fileprivate |private |)class.*ViewModel.*ObservableObject.*$"
    message: "Use @MainActor on view models."
    severity: error

  dynamic_font_modifier:
    match_kinds:
      - identifier
    regex: "\\.font\\(Font\\("
    message: "Use .dyamicFont() modifier."
    severity: error

  # Because our app uses a SwiftUI view as the root view, certain code patterns don't work.
  # As a result, we must use the scene window init instead of the window frame init.
  disallowed_window_usage:
    match_kinds:
      - identifier
    regex: "UIWindow\\(frame:"
    message: "Use UIWindow(windowScene:) instead. UIWindow(frame:) won't work in our app."
    severity: error

  # Published ObservableObject models must use `@PublishedObject` instead of `Published`, or the objectWillChange subject
  # won't be properly chained for nested objects.
  use_published_object:
    regex: "@Published ( |\\S)*Model"
    message: "Use @PublishedObject for nested models."
    severity: error
    
  hatch_base_view_models:
    regex: "(?<!MainActor)\\n(public |internal |fileprivate |private |)class.*HatchBaseViewModel.*$"
    message: "Use @MainActor on hatch base view models."
    severity: error

  user_defaults:
    regex: "[ \\.]UserDefaults[ \\(\\.]+"
    message: "Use HatchServiceAppStateAPI and HatchServiceAppStateUserDefaults instead."
    severity: error
    match_kinds:
      - argument
      - attribute.builtin
      - attribute.id
      - buildconfig.id
      - buildconfig.keyword
      # # Disabling all comment and doccomment kinds (allow mention of UserDefaults in comments)
      # - comment
      # - comment.mark
      # - comment.url
      # - doccomment
      # - doccomment.field
      - identifier
      - keyword
      - number
      - objectliteral
      - parameter
      - placeholder
      - string
      - string_interpolation_anchor
      - typeidentifier

